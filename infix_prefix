#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
int top = -1;

// Push a character onto the stack
void push(char c) {
    stack[++top] = c;
}

// Pop a character from the stack
char pop() {
    return stack[top--];
}

// Function to check if the stack is empty
int isEmpty() {
    return top == -1;
}

// Function to check precedence of operators
int precedence(char c) {
    if (c == '^')
        return 3;
    else if (c == '*' || c == '/')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return 0;
}

// Function to check if a character is an operator
int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

// Function to reverse a string
void reverse(char *exp) {
    int len = strlen(exp);
    for (int i = 0; i < len / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[len - i - 1];
        exp[len - i - 1] = temp;
    }
}

// Function to convert infix to prefix
void infixToPrefix(char infix[]) {
    char prefix[MAX], temp[MAX];
    int i, j = 0;

    reverse(infix); // Step 1: Reverse the infix expression

    // Step 2: Swap '(' and ')'
    for (i = 0; infix[i] != '\0'; i++) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    // Step 3: Convert to postfix (on reversed expression)
    for (i = 0; infix[i] != '\0'; i++) {
        char c = infix[i];

        if (isalnum(c)) {
            temp[j++] = c;
        }
        else if (c == '(') {
            push(c);
        }
        else if (c == ')') {
            while (!isEmpty() && stack[top] != '(')
                temp[j++] = pop();
            pop(); // remove '('
        }
        else if (isOperator(c)) {
            while (!isEmpty() && precedence(stack[top]) > precedence(c))
                temp[j++] = pop();
            push(c);
        }
    }

    while (!isEmpty())
        temp[j++] = pop();

    temp[j] = '\0';

    // Step 4: Reverse the postfix result â†’ gives prefix
    reverse(temp);

    printf("Prefix Expression: %s\n", temp);
}

// Main function
int main() {
    char infix[MAX];
    printf("Enter Infix Expression: ");
    scanf("%s", infix);

    infixToPrefix(infix);
    return 0;
}
